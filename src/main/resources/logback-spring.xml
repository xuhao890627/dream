<?xml version="1.0" encoding="UTF-8"?>
<!--
    scan，默认值为true，当配置文件发生改变时，是否重新加载
    scanPeriod，设置监测配置文件是否修改的时间间隔，当scan为true时，此属性生效，默认时间单位是ms，默认的时间间隔是1分钟。
    debug，默认值为false，是否打印logback内部日志信息，用于实时查看logback运行状态。
-->
<configuration scan="true" debug="false">
    <!--property 用来定义变量值的标签，有两个属性，name和value，其中name的值是变量的名称，value的值是变量定义的值，通过定义的值会被插入到logger上下文件中，定义变量后，可以使用${}来使用变量。-->
    <property name="application.name" value="dream" />
    <property name="log.path" value="/Users/jxu/logs" />
    <!--输出到控制台 -->

    <!--
        appender 用来格式化日志输出节点，有两个属性name和class，class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略。
        %d{HH: mm:ss.SSS} 日志输出时间
        %thread 输出日志的进程名字，这个Web应用以及异步任务处理中很有用。
        %-5level 日志级别，并且使用5个字符左对齐
        %logger{36}  日志输出者的名字
        %msg  日志消息
        %n  平台的换行符
        RollingFileAppender
    -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%p] [%t] %c - %m%n</pattern>
        </encoder>
    </appender>
    <!-- info级别日志控制 -->
    <appender name="info_file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 文件路径 -->
        <file>${log.path}/${application.name}/info.log</file>
        <!-- 是否追加 默认为true -->
        <append>true</append>
        <!-- 滚动策略 日期+大小 策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/${application.name}/%d{yyyy-MM-dd}/info/info-%i.zip</fileNamePattern>
            <!-- 单个日志大小 -->
            <maxFileSize>50MB</maxFileSize>
            <!-- 日志保存周期 -->
            <maxHistory>7</maxHistory>
            <!-- 总大小 -->
            <totalSizeCap>2GB</totalSizeCap>
        </rollingPolicy>
        <!-- 格式化 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%p] [%t] %c - %m%n</pattern>
        </encoder>
        <!-- 级别过滤 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <!-- warn级别日志控制 -->
    <appender name="warn_file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 文件路径 -->
        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
         如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
         的日志改名为今天的日期。即，<File> 的日志都是当天的。
         -->
        <file>${log.path}/${application.name}/warn.log</file>
        <!-- 是否追加 默认为true -->
        <append>true</append>
        <!-- 滚动策略 日期+大小 策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/${application.name}/%d{yyyy-MM-dd}/warn/warn-%i.zip</fileNamePattern>
            <!-- 单个日志大小 -->
            <maxFileSize>50MB</maxFileSize>
            <!-- 日志保存周期 -->
            <maxHistory>15</maxHistory>
            <!-- 总大小 -->
            <totalSizeCap>2GB</totalSizeCap>
        </rollingPolicy>
        <!-- 格式化 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%p] [%t] %c - %m%n</pattern>
        </encoder>
        <!-- 级别过滤 -->
        <!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，
            所以我们使用下面的策略，可以避免输出 Error 的日志-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--过滤 WARN-->
            <level>WARN</level>
            <!--匹配到就允许 /DENY 禁止-->
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <!-- error级别日志控制 -->
    <appender name="error_file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 文件路径 -->
        <file>${log.path}/${application.name}/error.log</file>
        <!-- 是否追加 默认为true -->
        <append>true</append>
        <!-- 滚动策略 日期+大小 策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/${application.name}/%d{yyyy-MM-dd}/error/error-%i.zip</fileNamePattern>
            <!-- 单个日志大小 -->
            <maxFileSize>50MB</maxFileSize>
            <!-- 日志保存周期 -->
            <maxHistory>15</maxHistory>
            <!-- 总大小 -->
            <totalSizeCap>2GB</totalSizeCap>
        </rollingPolicy>
        <!-- 格式化 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%p] [%t] %c - %m%n</pattern>
        </encoder>
        <!-- 级别过滤 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 特殊处理 -->
    <!-- 用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>
        name：用来指定受此logger约束的某一个包或者具体的某一个类。
        level：用来设置打印级别，大小写无关。还有一个特殊的值inherited或同义词null，代表强制执行上级的级别，如果未设置此属性，那么当前logger将会继承上级的级别。
        additivity：是否向上级logger传递打印信息，默认true。
        没有设置addtivity，默认为true，将此logger的打印信息向上级传递，没有appender，此logger本身不打印任何信息，所以会将日志信息传递给上级，一般为root，再交给root配置好的appender处理。
    -->
    <logger name="org.springframework" level="warn" />

    <!-- 开发、默认环境 只输出到控制台 -->
    <springProfile name="default,dev">
        <!-- root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性。可以包含零个或多个元素，标识这个appender将会添加到这个logger -->
        <root level="info">
            <appender-ref ref="console" />
        </root>
    </springProfile>
    <!-- 测试环境 输出info及以上日志 -->
    <springProfile name="test">
        <root level="info">
            <appender-ref ref="info_file" />
            <appender-ref ref="warn_file" />
            <appender-ref ref="error_file" />
        </root>
    </springProfile>
    <!-- 正式环境 输出warn及以上日志 -->
    <springProfile name="prod">
        <root level="warn">
            <appender-ref ref="info_file" />
            <appender-ref ref="warn_file" />
            <appender-ref ref="error_file" />
        </root>
    </springProfile>
</configuration>